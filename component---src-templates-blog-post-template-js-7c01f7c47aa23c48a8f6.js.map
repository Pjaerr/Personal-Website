{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./src/components/GithubIssueComments/GithubIssueComments.jsx","webpack:///./src/components/BlogpostEnd/BlogpostEnd.js","webpack:///./src/templates/contentStyles.js","webpack:///./src/templates/BlogPostTemplateStyles.js","webpack:///./src/templates/BlogPostTemplate.js"],"names":["MDXRenderer","require","module","React","useMDXComponents","mdx","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn","$export","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","S","Target","args","newTarget","arguments","length","$args","push","apply","proto","prototype","instance","result","Function","call","GithubIssueCommentsCore","issueUri","commentsPerPage","allowRefreshingComments","useState","comments","setComments","commentsHaveLoaded","setCommentsHaveLoaded","currentPage","setCurrentPage","loadComments","undefined","window","fetch","method","headers","Accept","then","res","json","data","message","console","error","reverse","commentPages","page","currentComment","comment","body","__html","user","username","login","avatarUrl","isRepositoryOwner","createdAt","useEffect","map","activePage","numberOfPages","onPageChange","pageNumber","onRefresh","redirectUrl","Pagination","buttons","i","className","onClick","RefreshCommentsButton","allowCommentsRefresh","setAllowCommentsRefresh","disabled","setTimeout","Comment","href","target","rel","src","alt","Date","toLocaleDateString","dangerouslySetInnerHTML","NoCommentsFound","role","aria-label","NewCommentButton","LoadingComments","GithubIssueComments","useShowCommentsButton","showComments","setShowComments","Container","styled","section","blogBodyFontSize","small","breakpoints","medium","large","BlogpostEnd","selectedElements","css","headings","blogHeadingFontSize","paragraphs","links","lists","inlineCodeBlocks","codeBlocks","mixins","fullWidth","BlogpostContainer","article","BlogpostTitle","h1","BlogpostDate","p","BlogpostContent","contentStyles","Template","frontmatter","description","lang","title","image","date","issueLink","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-template-js-7c01f7c47aa23c48a8f6.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./GithubIssueComments.css\";\nimport \"./GithubIssueCommentsDark.css\";\n\n/**\n * Utilise an existing Github Issue as a comment thread\n *\n * Props:\n * ---\n * @param {string} issueUri The URI of the github issue you want to load comments from.\n * Using the following structure: `USER/REPOSITORY_NAME/issues/ISSUE_NUMBER`.\n *\n * @param {boolean} [useShowCommentsButton] Should the comments (and their network request) be hidden behind a\n * \"Show Comments\" button. True if no value is provided.\n *\n * @param {number} [commentsPerPage] How many comments should be shown per page, will show pagination if there\n * is more than 1 page and will show all comments on a single page if no value is provided.\n *\n * @param {boolean} [allowRefreshingComments] Should the user be shown a \"Check for new comments\" button? True if\n * no value is provided.\n */\nconst GithubIssueComments = ({\n  issueUri,\n  useShowCommentsButton = true,\n  allowRefreshingComments = true,\n  commentsPerPage,\n}) => {\n  const [showComments, setShowComments] = useState(!useShowCommentsButton);\n\n  return (\n    <section className=\"GithubIssueComments-container\">\n      {showComments ? (\n        <GithubIssueCommentsCore\n          issueUri={issueUri}\n          commentsPerPage={commentsPerPage}\n          allowRefreshingComments={allowRefreshingComments}\n        />\n      ) : (\n        <button\n          className=\"GithubIssueComments-show-comments-button\"\n          onClick={() => setShowComments(true)}\n        >\n          Show Comments\n        </button>\n      )}\n    </section>\n  );\n};\n\nconst GithubIssueCommentsCore = ({\n  issueUri,\n  commentsPerPage,\n  allowRefreshingComments,\n}) => {\n  const [comments, setComments] = useState([]);\n  const [commentsHaveLoaded, setCommentsHaveLoaded] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const loadComments = () => {\n    /*Make a GET request to the github API for comments at the provided IssueUri. Request that\n    the comment body be formatted as HTML.*/\n    if (window.fetch !== undefined) {\n      fetch(`https://api.github.com/repos/${issueUri}/comments`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/vnd.github.v3.html+json\",\n        },\n      })\n        .then(res => {\n          return res.json();\n        })\n        .then(data => {\n          //If the provided Github Issue exists\n          if (!data.message) {\n            data = data.reverse();\n\n            //If no comment per page limit has been set, show all comments on one page\n            if (!commentsPerPage) {\n              commentsPerPage = data.length;\n            }\n\n            //Organise comments into pages\n            const commentPages = []; //The array of all page arrays\n            let page = []; //The current page\n\n            let currentComment = 0;\n\n            /*For each comment, push it to an array, and if the array reaches the size of\n          commentsPerPage push the array into the commentPages array and start a new array \n          until all comments have been allocated to page arrays.*/\n            for (const comment of data) {\n              page.push({\n                body: { __html: comment[\"body_html\"] },\n                user: {\n                  username: comment.user.login,\n                  avatarUrl: comment.user[\"avatar_url\"],\n                  isRepositoryOwner: comment[\"author_association\"] === \"OWNER\",\n                },\n                createdAt: comment[\"created_at\"],\n              });\n\n              //If we've reached the maximum number of comments in a page\n              if (currentComment === commentsPerPage - 1) {\n                commentPages.push(page);\n                page = [];\n                currentComment = 0;\n              } else {\n                currentComment++;\n              }\n            }\n\n            //If we've run out of comments but not met our commentsPerPage limit,\n            //Push the last page to the array of pages\n            if (page.length > 0) {\n              commentPages.push(page);\n            }\n\n            setComments(commentPages);\n            setCommentsHaveLoaded(true);\n          } else {\n            console.error(`The issueUri: \"${issueUri}\" doesn't exist`);\n          }\n        });\n    }\n  };\n\n  useEffect(loadComments, [issueUri]);\n\n  if (commentsHaveLoaded) {\n    return (\n      <>\n        {comments.length > 0 && comments[currentPage] ? (\n          comments[currentPage].map(comment => (\n            <Comment\n              key={comment.user.username + \"_\" + comment.createdAt}\n              body={comment.body}\n              user={comment.user}\n              createdAt={comment.createdAt}\n            />\n          ))\n        ) : (\n          <NoCommentsFound />\n        )}\n        {comments.length > 1 && (\n          <Pagination\n            activePage={currentPage}\n            numberOfPages={comments.length}\n            onPageChange={pageNumber => setCurrentPage(pageNumber)}\n          />\n        )}\n\n        {allowRefreshingComments && (\n          <RefreshCommentsButton onRefresh={loadComments} />\n        )}\n\n        <NewCommentButton\n          redirectUrl={`https://github.com/${issueUri}#issue-comment-box`}\n        />\n      </>\n    );\n  }\n\n  return <LoadingComments />;\n};\n\n/**\n *\n * @param {number} activePage Which button should be shown as active (0 based index).\n *\n * @param {number} numberOfPages How many buttons should be shown.\n *\n * @param {(pageNumber: number) => void} onPageChange Called when a button is pressed, passes argument\n * set to the index of the button pressed.\n */\nconst Pagination = ({ activePage, numberOfPages, onPageChange }) => {\n  const buttons = [];\n\n  for (let i = 0; i < numberOfPages; i++) {\n    buttons.push(\n      <button\n        key={i}\n        className={\n          activePage === i\n            ? \"GithubIssueComments-pagination-button GithubIssueComments-pagination-button-active\"\n            : \"GithubIssueComments-pagination-button\"\n        }\n        onClick={() => {\n          onPageChange(i);\n        }}\n      >\n        {i + 1}\n      </button>\n    );\n  }\n\n  return <div className=\"GithubIssueComments-pagination\">{buttons}</div>;\n};\n\n/**\n * Button component that calls a given `onRefresh()` function and disables itself for 1 second between\n * button clicks to avoid spamming the button.\n * @param {() => void} onRefresh\n */\nconst RefreshCommentsButton = ({ onRefresh }) => {\n  const [allowCommentsRefresh, setAllowCommentsRefresh] = useState(false);\n\n  return (\n    <button\n      className=\"GithubIssueComments-refresh-comments-button\"\n      disabled={allowCommentsRefresh}\n      onClick={() => {\n        setAllowCommentsRefresh(true);\n        onRefresh();\n        setTimeout(() => setAllowCommentsRefresh(false), 1000);\n      }}\n    >\n      Check for new comments\n    </button>\n  );\n};\n\nconst Comment = ({ body, user, createdAt }) => (\n  <div className=\"GithubIssueComments-comment\">\n    <a\n      className=\"GithubIssueComments-comment-user-avatar\"\n      href={`https://github.com/${user.username}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <img src={user.avatarUrl} alt={`Avatar of ${user.username}`} />\n    </a>\n\n    <div className=\"GithubIssueComments-comment-box\">\n      <div\n        className={\n          user.isRepositoryOwner\n            ? \"GithubIssueComments-comment-box-header GithubIssueComments-comment-box-header-isOwner\"\n            : \"GithubIssueComments-comment-box-header\"\n        }\n      >\n        <b className=\"GithubIssueComments-comment-box-header-username\">\n          {user.username}\n          <span> commented on {new Date(createdAt).toLocaleDateString()}</span>\n        </b>\n      </div>\n      <div className=\"GithubIssueComments-comment-box-body\">\n        <p dangerouslySetInnerHTML={body}></p>\n      </div>\n    </div>\n  </div>\n);\n\nconst NoCommentsFound = () => (\n  <p className=\"GithubIssueComments-no-comments-found\">\n    No comments found{\" \"}\n    <span role=\"img\" aria-label=\"Smiley Face Emoji\">\n      🙁\n    </span>\n  </p>\n);\n\nconst NewCommentButton = ({ redirectUrl }) => (\n  <a\n    className=\"GithubIssueComments-new-comment-button\"\n    href={redirectUrl}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    Write a Comment via Github\n  </a>\n);\n\nconst LoadingComments = () => (\n  <section className=\"GithubIssueComments-container\">\n    <div className=\"GithubIssueComments-loading-icon\"></div>\n  </section>\n);\n\nexport default GithubIssueComments;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\nimport { breakpoints, blogBodyFontSize } from \"../../constants\";\n\nconst Container = styled.section`\n  margin-top: 40px;\n  margin-bottom: 40px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  p {\n    font-weight: bold;\n    text-align: center;\n    font-size: ${blogBodyFontSize.small};\n\n    @media (min-width: ${breakpoints.medium}) {\n      font-size: ${blogBodyFontSize.large};\n    }\n  }\n`;\n\nconst BlogpostEnd = () => {\n  return (\n    <Container>\n      <p>Congrats, you made it! 🎉</p>\n      <p>\n        If you enjoyed this post you can read my other blog posts{\" \"}\n        <a href=\"/blog\">here</a> or follow me on twitter{\" \"}\n        <a href=\"https://twitter.com/Pjaerr\">@Pjaerr</a>\n      </p>\n    </Container>\n  );\n};\n\nexport default BlogpostEnd;\n","import { css } from \"styled-components\";\nimport mixins from \"../mixins\";\nimport {\n  blogHeadingFontSize,\n  blogBodyFontSize,\n  breakpoints,\n  pagePadding,\n} from \"../constants\";\n\nexport const selectedElements = css`\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  p,\n  em,\n  b {\n    &::selection {\n      color: var(--colour-background);\n      background-color: var(--colour-text-heading);\n    }\n  }\n`;\n\nexport const headings = css`\n  h1,\n  h2,\n  h3,\n  h4,\n  h5 {\n    font-weight: bold;\n  }\n\n  h2 {\n    margin-top: 40px;\n    margin-bottom: 20px;\n    font-size: ${blogHeadingFontSize.small};\n\n    @media (min-width: ${breakpoints.large}) {\n      font-size: ${blogHeadingFontSize.medium};\n    }\n  }\n\n  .heading-link-icon {\n    margin-right: 10px;\n  }\n`;\n\nexport const paragraphs = css`\n  p {\n    font-size: ${blogBodyFontSize.small};\n    max-width: 100%;\n    word-break: break-word;\n    line-height: 30px;\n\n    @media (min-width: ${breakpoints.medium}) {\n      font-size: ${blogBodyFontSize.large};\n    }\n  }\n`;\n\nexport const links = css`\n  a {\n    font-weight: bold;\n    text-decoration: underline;\n  }\n`;\n\nexport const lists = css`\n  ul,\n  ol {\n    list-style: none;\n    padding-left: 0;\n    max-width: 100%;\n\n    li {\n      display: flex;\n      -webkit-box-align: baseline;\n      align-items: baseline;\n      line-height: 32px;\n      margin-bottom: 25px;\n      font-size: ${blogBodyFontSize.small};\n\n      @media (min-width: ${breakpoints.medium}) {\n        font-size: ${blogBodyFontSize.large};\n      }\n\n      p {\n        display: inline;\n        font-size: inherit;\n      }\n\n      * {\n        margin-right: 4px;\n        margin-left: 4px;\n      }\n    }\n  }\n\n  ul {\n    li {\n      &::before {\n        content: \"꘎\";\n        padding-right: 16px;\n        color: var(--colour-highlight);\n        font-size: ${blogBodyFontSize.large};\n        font-weight: bold;\n      }\n    }\n  }\n\n  ol {\n    counter-reset: list-number;\n\n    li {\n      counter-increment: list-number;\n\n      &::before {\n        content: counter(list-number) \".\";\n        padding-right: 16px;\n        color: var(--colour-highlight);\n        font-size: ${blogBodyFontSize.large};\n        font-style: italic;\n        font-weight: bold;\n      }\n    }\n  }\n`;\n\nexport const inlineCodeBlocks = css`\n  code {\n    overflow-x: auto;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n`;\n\nexport const codeBlocks = css`\n  .gatsby-code-title {\n    background-color: var(--colour-code-title);\n    color: var(--colour-text-body);\n    padding-top: 0.5em;\n    text-align: center;\n    padding-bottom: 0.5em;\n    margin-bottom: -8px;\n    margin-top: 20px;\n\n    border-top-left-radius: 0.3em;\n    border-top-right-radius: 0.3em;\n\n    ${mixins.fullWidth};\n  }\n\n  .gatsby-highlight {\n    font-weight: 500;\n\n    margin-bottom: 20px;\n\n    ${mixins.fullWidth};\n\n    pre {\n      border-radius: 0;\n\n      code {\n        white-space: pre-wrap;\n        word-wrap: break-word;\n      }\n    }\n  }\n\n  .gatsby-highlight-code-line {\n    width: 100%;\n    background-color: var(--colour-code-highlight);\n    display: block;\n    padding-right: 1em;\n    padding-left: 0.75em;\n    margin-left: -1em;\n    border-left: 0.25em solid var(--colour-code-highlight-sidebar);\n  }\n`;\n","import styled from \"styled-components\";\n\nimport {\n  blogHeadingFontSize,\n  blogBodyFontSize,\n  breakpoints,\n} from \"../constants\";\n\nimport * as contentStyles from \"./contentStyles\";\n\nexport const BlogpostContainer = styled.article`\n  max-width: 100%;\n\n  @media (min-width: ${breakpoints.large}) {\n    max-width: 50em;\n  }\n`;\n\nexport const BlogpostTitle = styled.h1`\n  font-size: ${blogHeadingFontSize.medium};\n\n  @media (min-width: ${breakpoints.small}) {\n    font-size: ${blogHeadingFontSize.large};\n  }\n`;\n\nexport const BlogpostDate = styled.p`\n  margin-bottom: 35px;\n  @media (min-width: ${breakpoints.medium}) {\n    margin-bottom: 70px;\n  }\n`;\n\nexport const BlogpostContent = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  font-weight: normal;\n  width: 100%;\n  max-width: 100%;\n\n  /** See ./contentStyles.js for element specific styling */\n  ${contentStyles.headings}\n  ${contentStyles.paragraphs}\n  ${contentStyles.selectedElements}\n  ${contentStyles.links}\n  ${contentStyles.inlineCodeBlocks}\n  ${contentStyles.codeBlocks}\n  ${contentStyles.lists}\n`;\n","import \"../themes/prism-solarizedlight.css\";\nimport \"../themes/prism-cobalt2.css\";\n\nimport React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\n\nimport { BlogPostLayout } from \"../components/Layout/Layout\";\nimport SEO from \"../components/seo\";\n\nimport GithubIssueComments from \"../components/GithubIssueComments/GithubIssueComments\";\nimport BlogpostEnd from \"../components/BlogpostEnd/BlogpostEnd\";\n\nimport * as styled from \"./BlogPostTemplateStyles\";\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { mdx } = data;\n  const { frontmatter, body } = mdx;\n\n  return (\n    <BlogPostLayout>\n      <SEO\n        description={frontmatter.description}\n        lang=\"en\"\n        title={frontmatter.title}\n        image={frontmatter.image}\n      />\n      <styled.BlogpostContainer>\n        <styled.BlogpostTitle>{frontmatter.title}</styled.BlogpostTitle>\n        <styled.BlogpostDate>{frontmatter.date}</styled.BlogpostDate>\n        <styled.BlogpostContent>\n          <MDXRenderer>{body}</MDXRenderer>\n        </styled.BlogpostContent>\n\n        <BlogpostEnd />\n        <GithubIssueComments\n          issueUri={frontmatter.issueLink}\n          commentsPerPage={5}\n        />\n      </styled.BlogpostContainer>\n    </BlogPostLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    mdx(frontmatter: { path: { eq: $path } }) {\n      body\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        description\n        issueLink\n        image\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}