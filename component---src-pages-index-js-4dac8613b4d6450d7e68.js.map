{"version":3,"sources":["webpack:///./src/styles/HomepageTitle.js","webpack:///./src/components/BlogpostLink/BlogpostLink.js","webpack:///./src/components/BlogListing/BlogListing.js","webpack:///./src/components/Project/ProjectStyles.js","webpack:///./src/components/Project/Project.js","webpack:///./src/components/ProjectListing/ProjectListing.js","webpack:///./src/pages/index.js"],"names":["HomepageTitle","styled","h1","headingFontSize","small","breakpoints","Container","div","medium","animationSpeed","BlogpostLink","title","date","description","href","BlogListingContainer","section","ViewAllPostsLink","a","BlogListing","data","numberOfBlogposts","allMdx","totalCount","blogposts","edges","filter","edge","node","frontmatter","isHidden","map","key","id","path","ProjectTechnology","p","props","colour","ProjectColouredBorder","gradient","start","end","ProjectContent","ProjectTechnologies","ProjectLinks","bodyFontSize","Technology","name","Project","technologies","githubLink","demoLink","target","rel","size","ProjectListingContainer","ProjectListing","projects","allProjectsJson","order","large","IndexPage","Layout","lang","image"],"mappings":"mIAIMA,EAAgBC,IAAOC,GAAV,gEAAGD,CAAH,6KAGJE,IAAgBC,MAKRC,IAAYD,OAKpBJ,O,kCCjBf,iDAKMM,EAAYL,IAAOM,IAAV,0EAAGN,CAAH,8MAQEE,IAAgBK,OACTC,KAyBTC,IAZM,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAChD,OACE,kBAACR,EAAD,KACE,uBAAGQ,KAAMA,GACP,4BAAKH,IAEP,2BAAIC,GACJ,2BAAIC,M,kKCvBJE,EAAuBd,IAAOe,QAAV,wFAAGf,CAAH,gJAOHI,IAAYD,OAK7Ba,EAAmBhB,IAAOiB,EAAV,oFAAGjB,CAAH,6XAYGQ,KA4DVU,EA/CK,WAClB,IAAMC,EAAI,OAoBJC,EAAoBD,EAAKE,OAAOC,WAChCC,EAAYJ,EAAKE,OAAOG,MAC3BC,QACC,SAAAC,GAAI,QAAMA,EAAKC,KAAKC,YAAYjB,OAASe,EAAKC,KAAKC,YAAYC,YAEhEC,KAAI,SAAAJ,GAAI,OACP,kBAACjB,EAAA,EAAD,CACEsB,IAAKL,EAAKC,KAAKK,GACftB,MAAOgB,EAAKC,KAAKC,YAAYlB,MAC7BC,KAAMe,EAAKC,KAAKC,YAAYjB,KAC5BC,YAAac,EAAKC,KAAKC,YAAYhB,YACnCC,KAAMa,EAAKC,KAAKC,YAAYK,UAIlC,OACE,kBAACnB,EAAD,KACE,kBAACf,EAAA,EAAD,yBACCwB,EACAH,EAAoB,GACnB,kBAACJ,EAAD,CAAkBH,KAAK,SAAvB,oB,oCCrFKqB,EAAoBlC,IAAOmC,EAAV,mFAAGnC,CAAH,iJASN,SAAAoC,GAAK,OAAIA,EAAMC,UAI1BC,EAAwBtC,IAAOM,IAAV,uFAAGN,CAAH,gGAOlB,SAAAoC,GAAK,mCACYA,EAAMG,SAASC,MAD3B,KACqCJ,EAAMG,SAASE,IADpD,OAIRC,EAAiB1C,IAAOM,IAAV,gFAAGN,CAAH,yWAaJI,IAAYG,OAMlBL,IAAgBC,OASpBwC,EAAsB3C,IAAOM,IAAV,qFAAGN,CAAH,oEAMnB4C,EAAe5C,IAAOM,IAAV,8EAAGN,CAAH,kOAGV6C,IAAatC,QC1DtBuC,EAAa,SAAC,GAAD,IAAGT,EAAH,EAAGA,OAAQU,EAAX,EAAWA,KAAX,OACjB,kBAAC,EAAD,CAA0BV,OAAQA,GAChC,+BADF,IACYU,IAuDCC,EAnDC,SAAC,GAAD,IACdtC,EADc,EACdA,MACAE,EAFc,EAEdA,YACAqC,EAHc,EAGdA,aACAV,EAJc,EAIdA,SACAW,EALc,EAKdA,WACAC,EANc,EAMdA,SANc,OAQd,kBAAC,EAAD,CAA8BZ,SAAUA,GACtC,kBAAC,EAAD,KACE,4BAAK7B,GACL,2BAAIE,GACJ,kBAAC,EAAD,KACGqC,EAAanB,KAAI,gBAAGO,EAAH,EAAGA,OAAQU,EAAX,EAAWA,KAAX,OAChB,kBAAC,EAAD,CAAYhB,IAAKrB,EAAQ2B,EAASU,EAAMV,OAAQA,EAAQU,KAAMA,QAGlE,kBAAC,EAAD,KACE,uBAAGlC,KAAMqC,EAAYE,OAAO,SAASC,IAAI,uBACvC,kBAAC,IAAD,CAAeC,KAAK,OADtB,UAKc,KAAbH,GACC,uBAAGtC,KAAMsC,EAAUC,OAAO,SAASC,IAAI,uBACrC,kBAAC,IAAD,CAAaC,KAAK,OADpB,iBC1BJC,EAA0BvD,IAAOe,QAAV,0FAAGf,CAAH,8IAONI,IAAYD,OA8DpBqD,EAzDQ,WACrB,IAwBMC,EAxBI,OAwBYC,gBAAgBlC,MAEtC,OACE,kBAAC+B,EAAD,KACE,kBAACxD,EAAA,EAAD,iBACC0D,EAAS3B,KACR,oBACEH,KACEgC,EAFJ,EAEIA,MACAjD,EAHJ,EAGIA,MACAE,EAJJ,EAIIA,YACAqC,EALJ,EAKIA,aACAV,EANJ,EAMIA,SACAW,EAPJ,EAOIA,WACAC,EARJ,EAQIA,SARJ,OAWE,kBAAC,EAAD,CACEpB,IAAK4B,EAAQjD,EACbA,MAAOA,EACPE,YAAaA,EACbqC,aAAcA,EACdV,SAAUA,EACVW,WAAYA,EACZC,SAAUA,SC7DhB9C,EAAYL,IAAOM,IAAV,uEAAGN,CAAH,qUAeQI,IAAYwD,OAgBpBC,UAVG,kBAChB,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKC,KAAK,KAAKC,MAAM,UAAUpD,YAAY,2BAC3C,kBAACP,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,U","file":"component---src-pages-index-js-4dac8613b4d6450d7e68.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nimport { headingFontSize, breakpoints } from \"../constants\";\r\n\r\nconst HomepageTitle = styled.h1`\r\n  font-weight: bold;\r\n  margin-bottom: -20px;\r\n  font-size: ${headingFontSize.small};\r\n  letter-spacing: 2px;\r\n  text-transform: uppercase;\r\n  color: var(--colour-highlight);\r\n\r\n  @media (min-width: ${breakpoints.small}) {\r\n    margin-bottom: 25px;\r\n  }\r\n`;\r\n\r\nexport default HomepageTitle;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { animationSpeed, headingFontSize } from \"../../constants\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100vw;\r\n  max-width: 100vw;\r\n  min-height: 200px;\r\n\r\n  h1 {\r\n    font-size: ${headingFontSize.medium};\r\n    transition: color ${animationSpeed} ease;\r\n\r\n    &:hover {\r\n      color: var(--colour-highlight);\r\n    }\r\n  }\r\n\r\n  p {\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst BlogpostLink = ({ title, date, description, href }) => {\r\n  return (\r\n    <Container>\r\n      <a href={href}>\r\n        <h1>{title}</h1>\r\n      </a>\r\n      <p>{date}</p>\r\n      <p>{description}</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BlogpostLink;\r\n","import React from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n//Components\r\nimport BlogpostLink from \"../BlogpostLink/BlogpostLink\";\r\n\r\n//Styles\r\nimport styled from \"styled-components\";\r\nimport { animationSpeed, breakpoints } from \"../../constants\";\r\nimport HomepageTitle from \"../../styles/HomepageTitle\";\r\n\r\nconst BlogListingContainer = styled.section`\r\n  display: grid;\r\n  grid-row-gap: 60px;\r\n  grid-template-rows: auto;\r\n  justify-content: start;\r\n  align-content: start;\r\n\r\n  @media (min-width: ${breakpoints.small}) {\r\n    grid-row-gap: 15px;\r\n  }\r\n`;\r\n\r\nconst ViewAllPostsLink = styled.a`\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 120px;\r\n  height: 40px;\r\n\r\n  border: 1.5px solid var(--colour-text-body);\r\n  border-radius: 3px;\r\n\r\n  transition-property: border-color, color;\r\n  transition-duration: ${animationSpeed};\r\n  transition-timing-function: ease;\r\n\r\n  font-weight: bold;\r\n\r\n  color: var(--colour-text-body);\r\n\r\n  &:hover {\r\n    color: var(--colour-highlight);\r\n    border-color: var(--colour-highlight);\r\n  }\r\n`;\r\n\r\nconst BlogListing = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allMdx(limit: 4, sort: { order: DESC, fields: [frontmatter___date] }) {\r\n        totalCount\r\n        edges {\r\n          node {\r\n            id\r\n            frontmatter {\r\n              isHidden\r\n              date(formatString: \"MMMM DD, YYYY\")\r\n              path\r\n              title\r\n              description\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const numberOfBlogposts = data.allMdx.totalCount;\r\n  const blogposts = data.allMdx.edges\r\n    .filter(\r\n      edge => !!edge.node.frontmatter.date && !edge.node.frontmatter.isHidden\r\n    )\r\n    .map(edge => (\r\n      <BlogpostLink\r\n        key={edge.node.id}\r\n        title={edge.node.frontmatter.title}\r\n        date={edge.node.frontmatter.date}\r\n        description={edge.node.frontmatter.description}\r\n        href={edge.node.frontmatter.path}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <BlogListingContainer>\r\n      <HomepageTitle>Recent Blogposts</HomepageTitle>\r\n      {blogposts}\r\n      {numberOfBlogposts > 4 && (\r\n        <ViewAllPostsLink href=\"/blog\">View all posts</ViewAllPostsLink>\r\n      )}\r\n    </BlogListingContainer>\r\n  );\r\n};\r\n\r\nexport default BlogListing;\r\n","import styled from \"styled-components\";\r\n\r\nimport { headingFontSize, bodyFontSize, breakpoints } from \"../../constants\";\r\n\r\nexport const ProjectTechnology = styled.p`\r\n  margin-right: 15px;\r\n  font-size: var(--fontsize-body);\r\n\r\n  span {\r\n    display: inline-block;\r\n    width: 10px;\r\n    height: 10px;\r\n    border-radius: 25px;\r\n    background-color: ${props => props.colour};\r\n  }\r\n`;\r\n\r\nexport const ProjectColouredBorder = styled.div`\r\n  position: relative;\r\n  padding: 3px;\r\n  width: 100%;\r\n  max-width: 450px;\r\n\r\n  border-radius: 3px;\r\n  background: ${props =>\r\n    `linear-gradient(to right, ${props.gradient.start}, ${props.gradient.end})`};\r\n`;\r\n\r\nexport const ProjectContent = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 1fr 1fr 1fr 1fr;\r\n  grid-row-gap: 5px;\r\n\r\n  height: 100%;\r\n  max-height: 230px;\r\n\r\n  background-color: var(--colour-background);\r\n  transition: background-color 0.2s ease-out;\r\n\r\n  padding: 20px 25px 25px 10px;\r\n\r\n  @media (max-width: ${breakpoints.medium}) {\r\n    padding: 20px 15px 20px 10px;\r\n  }\r\n\r\n  h1 {\r\n    font-weight: 500;\r\n    font-size: ${headingFontSize.small};\r\n  }\r\n\r\n  p {\r\n    font-size: var(--fontsize-body);\r\n    color: var(--colour-text-body);\r\n  }\r\n`;\r\n\r\nexport const ProjectTechnologies = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: var(--bodyFontSize);\r\n`;\r\n\r\nexport const ProjectLinks = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: ${bodyFontSize.medium};\r\n\r\n  a {\r\n    margin-right: 15px;\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    color: var(--colour-text-body);\r\n\r\n    &:hover {\r\n      color: var(--colour-highlight);\r\n\r\n      svg {\r\n        fill: var(--colour-highlight);\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { GithubSVGIcon, DemoSVGIcon } from \"../SVGIcon/SVGIcon\";\r\n\r\nimport * as styled from \"./ProjectStyles\";\r\n\r\nconst Technology = ({ colour, name }) => (\r\n  <styled.ProjectTechnology colour={colour}>\r\n    <span /> {name}\r\n  </styled.ProjectTechnology>\r\n);\r\n\r\nconst Project = ({\r\n  title,\r\n  description,\r\n  technologies,\r\n  gradient,\r\n  githubLink,\r\n  demoLink,\r\n}) => (\r\n  <styled.ProjectColouredBorder gradient={gradient}>\r\n    <styled.ProjectContent>\r\n      <h1>{title}</h1>\r\n      <p>{description}</p>\r\n      <styled.ProjectTechnologies>\r\n        {technologies.map(({ colour, name }) => (\r\n          <Technology key={title + colour + name} colour={colour} name={name} />\r\n        ))}\r\n      </styled.ProjectTechnologies>\r\n      <styled.ProjectLinks>\r\n        <a href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <GithubSVGIcon size=\"24\" />\r\n          Github\r\n        </a>\r\n\r\n        {demoLink !== \"\" && (\r\n          <a href={demoLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <DemoSVGIcon size=\"24\" />\r\n            Live Demo\r\n          </a>\r\n        )}\r\n      </styled.ProjectLinks>\r\n    </styled.ProjectContent>\r\n  </styled.ProjectColouredBorder>\r\n);\r\n\r\nProject.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  technologies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      colour: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  gradient: PropTypes.shape({\r\n    start: PropTypes.string,\r\n    end: PropTypes.string,\r\n  }),\r\n  githubLink: PropTypes.string.isRequired,\r\n  demoLink: PropTypes.string,\r\n};\r\n\r\nexport default Project;\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\n\r\n//Components\r\nimport Project from \"../Project/Project\";\r\n\r\n//Styles\r\nimport styled from \"styled-components\";\r\nimport { breakpoints } from \"../../constants\";\r\nimport HomepageTitle from \"../../styles/HomepageTitle\";\r\n\r\nconst ProjectListingContainer = styled.section`\r\n  display: grid;\r\n  grid-template-rows: auto;\r\n  grid-row-gap: 60px;\r\n  justify-content: end;\r\n  align-content: start;\r\n\r\n  @media (min-width: ${breakpoints.small}) {\r\n    grid-row-gap: 25px;\r\n  }\r\n`;\r\n\r\nconst ProjectListing = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allProjectsJson(sort: { order: ASC, fields: [order] }) {\r\n        edges {\r\n          node {\r\n            order\r\n            title\r\n            description\r\n            technologies {\r\n              colour\r\n              name\r\n            }\r\n            gradient {\r\n              start\r\n              end\r\n            }\r\n            githubLink\r\n            demoLink\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const projects = data.allProjectsJson.edges;\r\n\r\n  return (\r\n    <ProjectListingContainer>\r\n      <HomepageTitle>Projects</HomepageTitle>\r\n      {projects.map(\r\n        ({\r\n          node: {\r\n            order,\r\n            title,\r\n            description,\r\n            technologies,\r\n            gradient,\r\n            githubLink,\r\n            demoLink,\r\n          },\r\n        }) => (\r\n          <Project\r\n            key={order + title}\r\n            title={title}\r\n            description={description}\r\n            technologies={technologies}\r\n            gradient={gradient}\r\n            githubLink={githubLink}\r\n            demoLink={demoLink}\r\n          />\r\n        )\r\n      )}\r\n    </ProjectListingContainer>\r\n  );\r\n};\r\n\r\nexport default ProjectListing;\r\n","import React from \"react\";\r\n\r\nimport { Layout } from \"../components/Layout/Layout\";\r\nimport SEO from \"../components/seo\";\r\n\r\nimport BlogListing from \"../components/BlogListing/BlogListing\";\r\nimport ProjectListing from \"../components/ProjectListing/ProjectListing\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { breakpoints } from \"../constants\";\r\n\r\nconst Container = styled.div`\r\n  /* Ugly layout for IE10/11 */\r\n  @media screen and (-ms-high-contrast: active),\r\n    screen and (-ms-high-contrast: none) {\r\n    display: flex;\r\n  }\r\n\r\n  display: grid;\r\n  justify-content: center;\r\n  grid-template-columns: 1fr;\r\n  justify-items: start;\r\n  grid-template-rows: auto;\r\n  grid-column-gap: 90px;\r\n  grid-row-gap: 80px;\r\n\r\n  @media (min-width: ${breakpoints.large}) {\r\n    grid-template-columns: 2.5fr 1fr;\r\n    grid-template-rows: auto;\r\n  }\r\n`;\r\n\r\nconst IndexPage = () => (\r\n  <Layout>\r\n    <SEO lang=\"en\" image=\"/me.jpg\" description=\"Josh Jackson - @Pjaerr\" />\r\n    <Container>\r\n      <BlogListing />\r\n      <ProjectListing />\r\n    </Container>\r\n  </Layout>\r\n);\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}