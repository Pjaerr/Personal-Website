{"version":3,"sources":["webpack:///./src/styles/HomepageTitle.js","webpack:///./src/components/BlogpostLink/BlogpostLink.js","webpack:///./src/components/BlogListing/BlogListing.js","webpack:///./src/components/Project/ProjectStyles.js","webpack:///./src/components/Project/Project.js","webpack:///./src/components/ProjectListing/ProjectListing.js","webpack:///./src/pages/index.js"],"names":["HomepageTitle","styled","h1","headingFontSize","small","breakpoints","Container","div","medium","animationSpeed","BlogpostLink","title","date","description","href","BlogListingContainer","section","ViewAllPostsLink","a","BlogListing","data","numberOfBlogposts","allMdx","totalCount","blogposts","edges","filter","edge","node","frontmatter","isHidden","map","key","id","path","ProjectTechnology","p","props","colour","ProjectColouredBorder","gradient","start","end","ProjectContent","ProjectTechnologies","ProjectLinks","bodyFontSize","Technology","name","Project","technologies","githubLink","demoLink","target","rel","size","ProjectListingContainer","ProjectListing","projects","allProjectsJson","order","large","IndexPage","Layout","lang","image"],"mappings":"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","file":"component---src-pages-index-js-5160086cb448909ff2d7.js","sourcesContent":["import styled from \"styled-components\";\n\nimport { headingFontSize, breakpoints } from \"../constants\";\n\nconst HomepageTitle = styled.h1`\n  font-weight: bold;\n  margin-bottom: -20px;\n  font-size: ${headingFontSize.small};\n  letter-spacing: 2px;\n  text-transform: uppercase;\n  color: var(--colour-highlight);\n\n  @media (min-width: ${breakpoints.small}) {\n    margin-bottom: 25px;\n  }\n`;\n\nexport default HomepageTitle;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\nimport { animationSpeed, headingFontSize } from \"../../constants\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 680px;\n  min-height: 200px;\n\n  h1 {\n    font-size: ${headingFontSize.medium};\n    transition: color ${animationSpeed} ease;\n\n    &:hover {\n      color: var(--colour-highlight);\n    }\n  }\n\n  p {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n`;\n\nconst BlogpostLink = ({ title, date, description, href }) => {\n  return (\n    <Container>\n      <a href={href}>\n        <h1>{title}</h1>\n      </a>\n      <p>{date}</p>\n      <p>{description}</p>\n    </Container>\n  );\n};\n\nexport default BlogpostLink;\n","import React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\n//Components\nimport BlogpostLink from \"../BlogpostLink/BlogpostLink\";\n\n//Styles\nimport styled from \"styled-components\";\nimport { animationSpeed, breakpoints } from \"../../constants\";\nimport HomepageTitle from \"../../styles/HomepageTitle\";\n\nconst BlogListingContainer = styled.section`\n  display: grid;\n  grid-row-gap: 60px;\n  grid-template-rows: auto;\n  justify-content: start;\n  align-content: start;\n\n  @media (min-width: ${breakpoints.small}) {\n    grid-row-gap: 15px;\n  }\n`;\n\nconst ViewAllPostsLink = styled.a`\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 120px;\n  height: 40px;\n\n  border: 1.5px solid var(--colour-text-body);\n  border-radius: 3px;\n\n  transition-property: border-color, color;\n  transition-duration: ${animationSpeed};\n  transition-timing-function: ease;\n\n  font-weight: bold;\n\n  color: var(--colour-text-body);\n\n  &:hover {\n    color: var(--colour-highlight);\n    border-color: var(--colour-highlight);\n  }\n`;\n\nconst BlogListing = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx(limit: 4, sort: { order: DESC, fields: [frontmatter___date] }) {\n        totalCount\n        edges {\n          node {\n            id\n            frontmatter {\n              isHidden\n              date(formatString: \"MMMM DD, YYYY\")\n              path\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const numberOfBlogposts = data.allMdx.totalCount;\n  const blogposts = data.allMdx.edges\n    .filter(\n      edge => !!edge.node.frontmatter.date && !edge.node.frontmatter.isHidden\n    )\n    .map(edge => (\n      <BlogpostLink\n        key={edge.node.id}\n        title={edge.node.frontmatter.title}\n        date={edge.node.frontmatter.date}\n        description={edge.node.frontmatter.description}\n        href={edge.node.frontmatter.path}\n      />\n    ));\n\n  return (\n    <BlogListingContainer>\n      <HomepageTitle>Recent Blogposts</HomepageTitle>\n      {blogposts}\n      {numberOfBlogposts > 4 && (\n        <ViewAllPostsLink href=\"/blog\">View all posts</ViewAllPostsLink>\n      )}\n    </BlogListingContainer>\n  );\n};\n\nexport default BlogListing;\n","import styled from \"styled-components\";\n\nimport { headingFontSize, bodyFontSize, breakpoints } from \"../../constants\";\n\nexport const ProjectTechnology = styled.p`\n  margin-right: 15px;\n  font-size: var(--fontsize-body);\n\n  span {\n    display: inline-block;\n    width: 10px;\n    height: 10px;\n    border-radius: 25px;\n    background-color: ${props => props.colour};\n  }\n`;\n\nexport const ProjectColouredBorder = styled.div`\n  position: relative;\n  padding: 3px;\n  width: 100%;\n  max-width: 450px;\n\n  border-radius: 3px;\n  background: ${props =>\n    `linear-gradient(to right, ${props.gradient.start}, ${props.gradient.end})`};\n`;\n\nexport const ProjectContent = styled.div`\n  display: grid;\n  grid-template-rows: 1fr 1fr 1fr 1fr;\n  grid-row-gap: 5px;\n\n  height: 100%;\n  max-height: 230px;\n\n  background-color: var(--colour-background);\n  transition: background-color 0.2s ease-out;\n\n  padding: 20px 25px 25px 10px;\n\n  @media (max-width: ${breakpoints.medium}) {\n    padding: 20px 15px 20px 10px;\n  }\n\n  h1 {\n    font-weight: 500;\n    font-size: ${headingFontSize.small};\n  }\n\n  p {\n    font-size: var(--fontsize-body);\n    color: var(--colour-text-body);\n  }\n`;\n\nexport const ProjectTechnologies = styled.div`\n  display: flex;\n  flex-direction: row;\n  font-size: var(--bodyFontSize);\n`;\n\nexport const ProjectLinks = styled.div`\n  display: flex;\n  flex-direction: row;\n  font-size: ${bodyFontSize.medium};\n\n  a {\n    margin-right: 15px;\n\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    color: var(--colour-text-body);\n\n    &:hover {\n      color: var(--colour-highlight);\n\n      svg {\n        fill: var(--colour-highlight);\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { GithubSVGIcon, DemoSVGIcon } from \"../SVGIcon/SVGIcon\";\n\nimport * as styled from \"./ProjectStyles\";\n\nconst Technology = ({ colour, name }) => (\n  <styled.ProjectTechnology colour={colour}>\n    <span /> {name}\n  </styled.ProjectTechnology>\n);\n\nconst Project = ({\n  title,\n  description,\n  technologies,\n  gradient,\n  githubLink,\n  demoLink,\n}) => (\n  <styled.ProjectColouredBorder gradient={gradient}>\n    <styled.ProjectContent>\n      <h1>{title}</h1>\n      <p>{description}</p>\n      <styled.ProjectTechnologies>\n        {technologies.map(({ colour, name }) => (\n          <Technology key={title + colour + name} colour={colour} name={name} />\n        ))}\n      </styled.ProjectTechnologies>\n      <styled.ProjectLinks>\n        <a href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          <GithubSVGIcon size=\"24\" />\n          Github\n        </a>\n\n        {demoLink !== \"\" && (\n          <a href={demoLink} target=\"_blank\" rel=\"noopener noreferrer\">\n            <DemoSVGIcon size=\"24\" />\n            Live Demo\n          </a>\n        )}\n      </styled.ProjectLinks>\n    </styled.ProjectContent>\n  </styled.ProjectColouredBorder>\n);\n\nProject.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  technologies: PropTypes.arrayOf(\n    PropTypes.shape({\n      colour: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  gradient: PropTypes.shape({\n    start: PropTypes.string,\n    end: PropTypes.string,\n  }),\n  githubLink: PropTypes.string.isRequired,\n  demoLink: PropTypes.string,\n};\n\nexport default Project;\n","import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\n//Components\nimport Project from \"../Project/Project\";\n\n//Styles\nimport styled from \"styled-components\";\nimport { breakpoints } from \"../../constants\";\nimport HomepageTitle from \"../../styles/HomepageTitle\";\n\nconst ProjectListingContainer = styled.section`\n  display: grid;\n  grid-template-rows: auto;\n  grid-row-gap: 60px;\n  justify-content: end;\n  align-content: start;\n\n  @media (min-width: ${breakpoints.small}) {\n    grid-row-gap: 25px;\n  }\n`;\n\nconst ProjectListing = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allProjectsJson(sort: { order: ASC, fields: [order] }) {\n        edges {\n          node {\n            order\n            title\n            description\n            technologies {\n              colour\n              name\n            }\n            gradient {\n              start\n              end\n            }\n            githubLink\n            demoLink\n          }\n        }\n      }\n    }\n  `);\n\n  const projects = data.allProjectsJson.edges;\n\n  return (\n    <ProjectListingContainer>\n      <HomepageTitle>Projects</HomepageTitle>\n      {projects.map(\n        ({\n          node: {\n            order,\n            title,\n            description,\n            technologies,\n            gradient,\n            githubLink,\n            demoLink,\n          },\n        }) => (\n          <Project\n            key={order + title}\n            title={title}\n            description={description}\n            technologies={technologies}\n            gradient={gradient}\n            githubLink={githubLink}\n            demoLink={demoLink}\n          />\n        )\n      )}\n    </ProjectListingContainer>\n  );\n};\n\nexport default ProjectListing;\n","import React from \"react\";\n\nimport { Layout } from \"../components/Layout/Layout\";\nimport SEO from \"../components/seo\";\n\nimport BlogListing from \"../components/BlogListing/BlogListing\";\nimport ProjectListing from \"../components/ProjectListing/ProjectListing\";\n\nimport styled from \"styled-components\";\nimport { breakpoints } from \"../constants\";\n\nconst Container = styled.div`\n  /* Ugly layout for IE10/11 */\n  @media screen and (-ms-high-contrast: active),\n    screen and (-ms-high-contrast: none) {\n    display: flex;\n  }\n\n  display: grid;\n  justify-content: center;\n  grid-template-columns: 1fr;\n  justify-items: start;\n  grid-template-rows: auto;\n  grid-column-gap: 90px;\n  grid-row-gap: 80px;\n\n  @media (min-width: ${breakpoints.large}) {\n    grid-template-columns: 2.5fr 1fr;\n    grid-template-rows: auto;\n  }\n`;\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO lang=\"en\" image=\"/me.jpg\" description=\"Josh Jackson - @Pjaerr\" />\n    <Container>\n      <BlogListing />\n      <ProjectListing />\n    </Container>\n  </Layout>\n);\n\nexport default IndexPage;\n"],"sourceRoot":""}