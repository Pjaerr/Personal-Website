{"version":3,"sources":["webpack:///./src/components/ScrollProgressBar/ScrollProgressBar.js","webpack:///./src/components/BlogPostAuthor/BlogPostAuthor.js","webpack:///./src/components/GithubIssueComments/GithubIssueComments.jsx","webpack:///./src/templates/BlogPostTemplate.js","webpack:///./node_modules/core-js/modules/es6.reflect.construct.js","webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["ScrollProgressBar","width","className","style","BlogPostAuthor","to","href","target","rel","GithubIssueCommentsCore","issueUri","commentsPerPage","allowRefreshingComments","useState","comments","setComments","commentsHaveLoaded","setCommentsHaveLoaded","currentPage","setCurrentPage","loadComments","undefined","window","fetch","method","headers","Accept","then","res","json","data","message","console","error","reverse","length","commentPages","page","currentComment","comment","push","body","__html","user","username","login","avatarUrl","isRepositoryOwner","createdAt","useEffect","map","key","activePage","numberOfPages","onPageChange","pageNumber","onRefresh","redirectUrl","Pagination","buttons","i","onClick","RefreshCommentsButton","allowCommentsRefresh","setAllowCommentsRefresh","disabled","setTimeout","Comment","src","alt","Date","toLocaleDateString","dangerouslySetInnerHTML","NoCommentsFound","role","aria-label","NewCommentButton","LoadingComments","GithubIssueComments","useShowCommentsButton","showComments","setShowComments","Template","mdx","frontmatter","scrollPos","setScrollPos","adjustScrollPosition","windowScroll","document","top","documentElement","scrollTop","height","scrollHeight","clientHeight","addEventListener","removeEventListener","Layout","description","lang","title","issueLink","name","twitterUsername","imgSrc","pageQuery","$export","create","aFunction","anObject","isObject","fails","bind","rConstruct","Reflect","construct","NEW_TARGET_BUG","F","ARGS_BUG","S","Target","args","newTarget","arguments","$args","apply","proto","prototype","instance","Object","result","Function","call","MDXRenderer","require","module","React","useMDXComponents","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","values","fn"],"mappings":"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","file":"component---src-templates-blog-post-template-js-531883cc377ff4b62e2e.js","sourcesContent":["import React from \"react\"\r\n\r\nimport \"./ScrollProgressBar.scss\"\r\n\r\nconst ScrollProgressBar = ({ width }) => {\r\n  return (\r\n    <div className=\"scroll-progress\">\r\n      <div\r\n        className=\"scroll-progress-bar\"\r\n        style={{\r\n          width: width + \"%\",\r\n        }}\r\n      ></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScrollProgressBar\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport \"./BlogPostAuthor.scss\"\r\n\r\nconst BlogPostAuthor = () => {\r\n  return (\r\n    <aside className=\"blog-post-author\">\r\n      <div className=\"blog-post-author-content\">\r\n        <h1>\r\n          If you enjoyed this post you can read my other blog posts{\" \"}\r\n          <Link to=\"/blog\">here</Link> or follow me on twitter{\" \"}\r\n          <a\r\n            href=\"https://twitter.com/Pjaerr\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            @Pjaerr\r\n          </a>\r\n        </h1>\r\n      </div>\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default BlogPostAuthor\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./GithubIssueComments.css\";\r\n\r\n/**\r\n * Utilise an existing Github Issue as a comment thread\r\n *\r\n * Props:\r\n * ---\r\n * @param {string} issueUri The URI of the github issue you want to load comments from.\r\n * Using the following structure: `USER/REPOSITORY_NAME/issues/ISSUE_NUMBER`.\r\n *\r\n * @param {boolean} [useShowCommentsButton] Should the comments (and their network request) be hidden behind a\r\n * \"Show Comments\" button. True if no value is provided.\r\n *\r\n * @param {number} [commentsPerPage] How many comments should be shown per page, will show pagination if there\r\n * is more than 1 page and will show all comments on a single page if no value is provided.\r\n *\r\n * @param {boolean} [allowRefreshingComments] Should the user be shown a \"Check for new comments\" button? True if\r\n * no value is provided.\r\n */\r\nconst GithubIssueComments = ({\r\n  issueUri,\r\n  useShowCommentsButton = true,\r\n  allowRefreshingComments = true,\r\n  commentsPerPage\r\n}) => {\r\n  const [showComments, setShowComments] = useState(!useShowCommentsButton);\r\n\r\n  return (\r\n    <section className=\"GithubIssueComments-container\">\r\n      {showComments ? (\r\n        <GithubIssueCommentsCore\r\n          issueUri={issueUri}\r\n          commentsPerPage={commentsPerPage}\r\n          allowRefreshingComments={allowRefreshingComments}\r\n        />\r\n      ) : (\r\n        <button\r\n          className=\"GithubIssueComments-show-comments-button\"\r\n          onClick={() => setShowComments(true)}\r\n        >\r\n          Show Comments\r\n        </button>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst GithubIssueCommentsCore = ({\r\n  issueUri,\r\n  commentsPerPage,\r\n  allowRefreshingComments\r\n}) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [commentsHaveLoaded, setCommentsHaveLoaded] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  const loadComments = () => {\r\n    /*Make a GET request to the github API for comments at the provided IssueUri. Request that\r\n    the comment body be formatted as HTML.*/\r\n    if (window.fetch !== undefined) {\r\n      fetch(`https://api.github.com/repos/${issueUri}/comments`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/vnd.github.v3.html+json\"\r\n        }\r\n      })\r\n        .then(res => {\r\n          return res.json();\r\n        })\r\n        .then(data => {\r\n          //If the provided Github Issue exists\r\n          if (!data.message) {\r\n            data = data.reverse();\r\n\r\n            //If no comment per page limit has been set, show all comments on one page\r\n            if (!commentsPerPage) {\r\n              commentsPerPage = data.length;\r\n            }\r\n\r\n            //Organise comments into pages\r\n            const commentPages = []; //The array of all page arrays\r\n            let page = []; //The current page\r\n\r\n            let currentComment = 0;\r\n\r\n            /*For each comment, push it to an array, and if the array reaches the size of\r\n          commentsPerPage push the array into the commentPages array and start a new array \r\n          until all comments have been allocated to page arrays.*/\r\n            for (const comment of data) {\r\n              page.push({\r\n                body: { __html: comment[\"body_html\"] },\r\n                user: {\r\n                  username: comment.user.login,\r\n                  avatarUrl: comment.user[\"avatar_url\"],\r\n                  isRepositoryOwner: comment[\"author_association\"] === \"OWNER\"\r\n                },\r\n                createdAt: comment[\"created_at\"]\r\n              });\r\n\r\n              //If we've reached the maximum number of comments in a page\r\n              if (currentComment === commentsPerPage - 1) {\r\n                commentPages.push(page);\r\n                page = [];\r\n                currentComment = 0;\r\n              } else {\r\n                currentComment++;\r\n              }\r\n            }\r\n\r\n            //If we've run out of comments but not met our commentsPerPage limit,\r\n            //Push the last page to the array of pages\r\n            if (page.length > 0) {\r\n              commentPages.push(page);\r\n            }\r\n\r\n            setComments(commentPages);\r\n            setCommentsHaveLoaded(true);\r\n          } else {\r\n            console.error(`The issueUri: \"${issueUri}\" doesn't exist`);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(loadComments, [issueUri]);\r\n\r\n  if (commentsHaveLoaded) {\r\n    return (\r\n      <>\r\n        {comments.length > 0 && comments[currentPage] ? (\r\n          comments[currentPage].map(comment => (\r\n            <Comment\r\n              key={comment.user.username + \"_\" + comment.createdAt}\r\n              body={comment.body}\r\n              user={comment.user}\r\n              createdAt={comment.createdAt}\r\n            />\r\n          ))\r\n        ) : (\r\n          <NoCommentsFound />\r\n        )}\r\n        {comments.length > 1 && (\r\n          <Pagination\r\n            activePage={currentPage}\r\n            numberOfPages={comments.length}\r\n            onPageChange={pageNumber => setCurrentPage(pageNumber)}\r\n          />\r\n        )}\r\n\r\n        {allowRefreshingComments && (\r\n          <RefreshCommentsButton onRefresh={loadComments} />\r\n        )}\r\n\r\n        <NewCommentButton\r\n          redirectUrl={`https://github.com/${issueUri}#issue-comment-box`}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return <LoadingComments />;\r\n};\r\n\r\n/**\r\n *\r\n * @param {number} activePage Which button should be shown as active (0 based index).\r\n *\r\n * @param {number} numberOfPages How many buttons should be shown.\r\n *\r\n * @param {(pageNumber: number) => void} onPageChange Called when a button is pressed, passes argument\r\n * set to the index of the button pressed.\r\n */\r\nconst Pagination = ({ activePage, numberOfPages, onPageChange }) => {\r\n  const buttons = [];\r\n\r\n  for (let i = 0; i < numberOfPages; i++) {\r\n    buttons.push(\r\n      <button\r\n        key={i}\r\n        className={\r\n          activePage === i\r\n            ? \"GithubIssueComments-pagination-button GithubIssueComments-pagination-button-active\"\r\n            : \"GithubIssueComments-pagination-button\"\r\n        }\r\n        onClick={() => {\r\n          onPageChange(i);\r\n        }}\r\n      >\r\n        {i + 1}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return <div className=\"GithubIssueComments-pagination\">{buttons}</div>;\r\n};\r\n\r\n/**\r\n * Button component that calls a given `onRefresh()` function and disables itself for 1 second between\r\n * button clicks to avoid spamming the button.\r\n * @param {() => void} onRefresh\r\n */\r\nconst RefreshCommentsButton = ({ onRefresh }) => {\r\n  const [allowCommentsRefresh, setAllowCommentsRefresh] = useState(false);\r\n\r\n  return (\r\n    <button\r\n      className=\"GithubIssueComments-refresh-comments-button\"\r\n      disabled={allowCommentsRefresh}\r\n      onClick={() => {\r\n        setAllowCommentsRefresh(true);\r\n        onRefresh();\r\n        setTimeout(() => setAllowCommentsRefresh(false), 1000);\r\n      }}\r\n    >\r\n      Check for new comments\r\n    </button>\r\n  );\r\n};\r\n\r\nconst Comment = ({ body, user, createdAt }) => (\r\n  <div className=\"GithubIssueComments-comment\">\r\n    <a\r\n      className=\"GithubIssueComments-comment-user-avatar\"\r\n      href={`https://github.com/${user.username}`}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      <img src={user.avatarUrl} alt={`Avatar of ${user.username}`} />\r\n    </a>\r\n\r\n    <div className=\"GithubIssueComments-comment-box\">\r\n      <div\r\n        className={\r\n          user.isRepositoryOwner\r\n            ? \"GithubIssueComments-comment-box-header GithubIssueComments-comment-box-header-isOwner\"\r\n            : \"GithubIssueComments-comment-box-header\"\r\n        }\r\n      >\r\n        <b className=\"GithubIssueComments-comment-box-header-username\">\r\n          {user.username}\r\n          <span> commented on {new Date(createdAt).toLocaleDateString()}</span>\r\n        </b>\r\n      </div>\r\n      <div className=\"GithubIssueComments-comment-box-body\">\r\n        <p dangerouslySetInnerHTML={body}></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst NoCommentsFound = () => (\r\n  <p className=\"GithubIssueComments-no-comments-found\">\r\n    No comments found{\" \"}\r\n    <span role=\"img\" aria-label=\"Smiley Face Emoji\">\r\n      🙁\r\n    </span>\r\n  </p>\r\n);\r\n\r\nconst NewCommentButton = ({ redirectUrl }) => (\r\n  <a\r\n    className=\"GithubIssueComments-new-comment-button\"\r\n    href={redirectUrl}\r\n    target=\"_blank\"\r\n    rel=\"noopener noreferrer\"\r\n  >\r\n    Write a Comment via Github\r\n  </a>\r\n);\r\n\r\nconst LoadingComments = () => (\r\n  <section className=\"GithubIssueComments-container\">\r\n    <div className=\"GithubIssueComments-loading-icon\"></div>\r\n  </section>\r\n);\r\n\r\nexport default GithubIssueComments;\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\r\n\r\nimport Layout from \"../components/Layout/Layout\"\r\nimport ScrollProgressBar from \"../components/ScrollProgressBar/ScrollProgressBar\"\r\n\r\nimport \"./BlogPostTemplate.scss\"\r\nimport BlogPostAuthor from \"../components/BlogPostAuthor/BlogPostAuthor\"\r\nimport SEO from \"../components/seo\"\r\n\r\nimport GithubIssueComments from \"../components/GithubIssueComments/GithubIssueComments\"\r\n\r\nexport default function Template({\r\n  data, // this prop will be injected by the GraphQL query below.\r\n}) {\r\n  const { mdx } = data // data.markdownRemark holds your post data\r\n  const { frontmatter, body } = mdx\r\n\r\n  const [scrollPos, setScrollPos] = useState(0)\r\n\r\n  const adjustScrollPosition = () => {\r\n    const windowScroll = document.body.top || document.documentElement.scrollTop\r\n\r\n    const height =\r\n      document.documentElement.scrollHeight -\r\n      document.documentElement.clientHeight\r\n\r\n    setScrollPos((windowScroll / height) * 100)\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", adjustScrollPosition)\r\n    return () => window.removeEventListener(\"scroll\", adjustScrollPosition)\r\n  }, [])\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        description={frontmatter.description}\r\n        lang=\"en\"\r\n        title={frontmatter.title}\r\n      />\r\n      <div>\r\n        <ScrollProgressBar width={scrollPos} />\r\n        <div className=\"blog-post\">\r\n          <article className=\"blog-post-container\">\r\n            <h1 className=\"sub-page-title\">{frontmatter.title}</h1>\r\n            <section className=\"blog-post-content\">\r\n              <MDXRenderer>{body}</MDXRenderer>\r\n            </section>\r\n            <GithubIssueComments issueUri={frontmatter.issueLink} />\r\n            <BlogPostAuthor\r\n              name=\"Josh Jackson\"\r\n              twitterUsername=\"Pjaerr\"\r\n              imgSrc=\"/me.jpg\"\r\n            />\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($path: String!) {\r\n    mdx(frontmatter: { path: { eq: $path } }) {\r\n      body\r\n      frontmatter {\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        path\r\n        title\r\n        description\r\n        issueLink\r\n      }\r\n    }\r\n  }\r\n`\r\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}